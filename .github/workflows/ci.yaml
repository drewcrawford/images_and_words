# matrix v7 + mesa + chrome
# chrome - firefox does not support WebGPU on Linux yet, see https://mozillagfx.wordpress.com where this will presumably be announced
# firefox does not support webGL in headless either, see https://bugzilla.mozilla.org/show_bug.cgi?id=1375585#c27
on: [push,pull_request]

jobs:
  ci:
    name: Build (${{ matrix.os }} ${{ matrix.cwd }} ${{ matrix.channel }} ${{ matrix.target }} ${{ matrix.features }})

    runs-on: ${{matrix.os}}


    strategy:
      matrix:
        channel: [""]
        features: [""]
        target: [""]
        cwd: ["."]
        additional_rustflags: [""]
        os: [ubuntu-latest]

        include:
          - os: ubuntu-latest
            channel: "+nightly"
            target: "wasm32-unknown-unknown"
            cwd: "."
            additional_rustflags: "-C target-feature=+atomics"

    steps:
      - uses: actions/checkout@v4

      - name: Compute cache key
        id: cache-key
        shell: bash
        env:
          FEATURES: ${{ matrix.features }}
        run: |
          set -euo pipefail
          FEATURES_SANITIZED=""
          if [ -n "${FEATURES}" ]; then
            FEATURES_SANITIZED=$(echo "${FEATURES}" | tr ',' '-')
          else
            FEATURES_SANITIZED="default"
          fi
          echo "features=${FEATURES_SANITIZED}" >> "$GITHUB_OUTPUT"

      - name: Cache target
        uses: actions/cache@v4
        with:
          key: target-${{ github.event.repository.name }}-${{ matrix.cwd }}-${{ matrix.os }}-${{ matrix.channel || 'stable'}}-${{ matrix.target || 'host' }}-${{ steps.cache-key.outputs.features }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          path: |
            target
          restore-keys: |
            target-${{ github.event.repository.name }}-${{ matrix.cwd }}-${{ matrix.os }}-${{ matrix.channel || 'stable'}}-${{ matrix.target || 'host' }}-${{ steps.cache-key.outputs.features }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}      
            target-${{ github.event.repository.name }}-${{ matrix.cwd }}-${{ matrix.os }}-${{ matrix.channel || 'stable'}}-${{ matrix.target || 'host' }}-${{ steps.cache-key.outputs.features }}      
            target-${{ github.event.repository.name }}-${{ matrix.cwd }}-${{ matrix.os }}-${{ matrix.channel || 'stable'}}-${{ matrix.target || 'host' }}      

      # Compute reusable args once
      - name: Compute cargo args
        id: args
        shell: bash
        env:
          FEATURE_FLAGS: ${{ matrix.features }}
          TARGET: ${{ matrix.target }}
        run: |
          set -euo pipefail      
          FEATURES_ARG=""      
          TARGET_ARG=""      
          if [ -n "${FEATURE_FLAGS}" ]; then      
            FEATURES_ARG="--features=${FEATURE_FLAGS}"      
          fi      
          if [ -n "${TARGET}" ]; then      
            TARGET_ARG="--target=${TARGET}"      
          fi      
          echo "features=${FEATURES_ARG}" >> "$GITHUB_OUTPUT"      
          echo "target=${TARGET_ARG}"   >> "$GITHUB_OUTPUT"      
          echo "features are ${FEATURES_ARG}"      
          echo "target is ${TARGET_ARG}"      

      #      - name: Github update Rust
      #        if: runner.os == 'Linux' && !(env.GITEA_ACTIONS == 'true')      #        run: |      #          # at the moment, GitHub is too far behind mainline rust (v1.89.0-v1.91.0-nightly)      #          rustup update
      - name: Install wasm target
        if: matrix.target == 'wasm32-unknown-unknown' && !(env.GITEA_ACTIONS == 'true')
        run: rustup ${{ matrix.channel}} target add wasm32-unknown-unknown

      - name: Install wasm-bindgen-cli
        if: matrix.target == 'wasm32-unknown-unknown' && !(env.GITEA_ACTIONS == 'true')
        run: cargo ${{ matrix.channel }} install wasm-bindgen-cli

      - name: Install nightly components
        if: matrix.channel == '+nightly' && !(env.GITEA_ACTIONS == 'true')
        run: |
          rustup ${{ matrix.channel }} component add rustfmt clippy      
          rustup ${{ matrix.channel }} component add rust-src      

      - name: Install mesa-utils
        if: env.GITEA_ACTIONS != 'true' && matrix.target == '' && matrix.os == 'ubuntu-latest'
        run: |
              sudo apt-get update
              sudo apt-get install -y mesa-utils

      - name: rustfmt
        run: cd ${{ matrix.cwd }} && RUSTFLAGS="$ADDITIONAL_RUSTFLAGS -Dwarnings" cargo ${{ matrix.channel }} fmt --check

      - name: cargo check
        run: cd ${{ matrix.cwd }} && RUSTFLAGS="$ADDITIONAL_RUSTFLAGS -Dwarnings" cargo ${{ matrix.channel }} check ${{ steps.args.outputs.features }} ${{ steps.args.outputs.target }}

      - name: clippy
        run: cd ${{ matrix.cwd }} && RUSTFLAGS="$ADDITIONAL_RUSTFLAGS -Dwarnings" cargo ${{ matrix.channel }} clippy --no-deps ${{ steps.args.outputs.features }} ${{ steps.args.outputs.target }}

      - name: docs
        run: cd ${{ matrix.cwd }} && RUSTDOCFLAGS="-D warnings" cargo ${{ matrix.channel }}  doc ${{ steps.args.outputs.features }} ${{ steps.args.outputs.target }}

      - name: tests
        run: cd ${{ matrix.cwd }} && CHROMEDRIVER=`which chromedriver` CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_RUNNER="wasm-bindgen-test-runner" RUSTFLAGS="$ADDITIONAL_RUSTFLAGS -Dwarnings" cargo ${{ matrix.channel }} test ${{ steps.args.outputs.features }} ${{ steps.args.outputs.target }}